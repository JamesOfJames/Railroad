<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteBridge</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>parentTrack</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connect?

connect = true;

platform = false;

image_speed = 0;

DrAw[0] = false;
DrAw[1] = false;
DrAw[2] = false;
DrAw[3] = false;
DrAw[4] = false;
DrAw[5] = false;
DrAw[6] = false;
DrAw[7] = false;
DrAw[8] = false;
DrAw[9] = false;

// Which Frames to show?
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Which frames?  Platform?  Clear grid cells

grid = control.grid * 2;
  
// What frames to show
// Right
if (connect)
{if instance_position(x + grid, y, parentTrack)
{//show_debug_message(id + ": touching " + instance_position(x + grid, y, parentTrack + " at " + string(x + grid) +", " + string(y)));
 DrAw[0] = true;
 if instance_position(x, y - grid, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x, y - grid, parentTrack + " at " + string(x) +", " + string(y - grid)));
  DrAw[4] = true;
  DrAw[0] = false;
  connect = false;}}
 if instance_position(x - grid, y, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x - grid, y, parentTrack + " at " + string(x - grid) +", " + string(y)));
  DrAw[8] = true;
  DrAw[0] = false;
  connect = false;}}
 if instance_position(x, y + grid, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x, y + grid, parentTrack + " at " + string(x) +", " + string(y + grid)));
  DrAw[7] = true;
  DrAw[0] = false;
  connect = false;}}}}

// Top
if (connect)
{if instance_position(x, y - grid, parentTrack)
{//show_debug_message(id + ": touching " + instance_position(x, y - grid, parentTrack + " at " + string(x) +", " + string(y - grid)));
DrAw[1] = true;
 if instance_position(x - grid, y, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x - grid, y, parentTrack + " at " + string(x - grid) +", " + string(y)));
  DrAw[5] = true;
  DrAw[1] = false;
  connect = false;}}
 if instance_position(x, y + grid, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x, y + grid, parentTrack + " at " + string(x) +", " + string(y + grid)));
  DrAw[9] = true;
  DrAw[1] = false;
  connect = false;}}
 if instance_position(x + grid, y, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x + grid, y, parentTrack + " at " + string(x + grid) +", " + string(y)));
  DrAw[4] = true;
  DrAw[1] = false;
  connect = false;}}}}
  
// Left
if (connect)
{if instance_position(x - grid, y, parentTrack)
{//show_debug_message(id + ": touching " + instance_position(x - grid, y, parentTrack + " at " + string(x - grid) + ", " + string(y)));
DrAw[2] = true;
 if instance_position(x + grid, y, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x + grid, y, parentTrack + " at " + string(x + grid) + ", " + string(y)));
  DrAw[8] = true;
  DrAw[2] = false;
  connect = false;}}
 if instance_position(x, y - grid, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x, y - grid, parentTrack + " at " + string(x) +", " + string(y - grid)));
  DrAw[5] = true;
  DrAw[2] = false;
  connect = false;}}
 if instance_position(x, y + grid, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x, y + grid, parentTrack + " at " + string(x) +", " + string(y + grid)));
  DrAw[6] = true;
  DrAw[2] = false;
  connect = false;}}}}

// Bottom
if (connect)
{if instance_position(x, y + grid, parentTrack)
{//show_debug_message(id + ": touching " + instance_position(x, y + grid, parentTrack + " at " + string(x) +", " + string(y + grid)));
DrAw[3] = true;
 if instance_position(x + grid, y, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x + grid, y, parentTrack + " at " + string(x + grid) +", " + string(y)));
  DrAw[7] = true;
  DrAw[3] = false;
  connect = false;}}
 if instance_position(x, y - grid, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x, y - grid, parentTrack + " at " + string(x) +", " + string(y - grid)));
  DrAw[9] = true;
  DrAw[3] = false;
  connect = false;}}
 if instance_position(x - grid, y, parentTrack)
 {if (connect)
  {//show_debug_message(id + ": touching " + instance_position(x - grid, y, parentTrack + " at " + string(x - grid) +", " + string(y)));
  DrAw[6] = true;
  DrAw[3] = false;
  connect = false;}}}}

grid/=2;

if (!connect)
{DrAw[0] = false;
 DrAw[1] = false;
 DrAw[2] = false;
 DrAw[3] = false;}


//show_debug_message(id + " draw list: " + DrAw[0] + ", " + DrAw[1] + ", " + DrAw[2] + ", " + DrAw[3] + ", " + DrAw[4] + ", " + DrAw[5] + ", " + DrAw[6] + ", " + DrAw[7] + ", " + DrAw[8] + ", " + DrAw[9]);

 
// MP Grid clearing
//mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + grid, y + grid);

mp_grid_add_rectangle(control.mpGrid, x, y, x + (2 * grid), y + (2 * grid));

if DrAw[0]
{mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + (2 * grid), y + grid);}
if DrAw[1]
{mp_grid_clear_rectangle(control.mpGrid, x + grid, y - grid, x + grid, y + grid);}
if DrAw[2]
{mp_grid_clear_rectangle(control.mpGrid, x - grid, y + grid, x + grid, y + grid);}
if DrAw[3]
{mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + grid, y + (2 * grid));}
if DrAw[4]
{mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + (2 * grid), y + grid);
 mp_grid_clear_rectangle(control.mpGrid, x + grid, y - grid, x + grid, y + grid);}
if DrAw[5]
{mp_grid_clear_rectangle(control.mpGrid, x + grid, y - grid, x + grid, y + grid);
 mp_grid_clear_rectangle(control.mpGrid, x - grid, y + grid, x + grid, y + grid);}
if DrAw[6]
{mp_grid_clear_rectangle(control.mpGrid, x - grid, y + grid, x + grid, y + grid);
 mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + grid, y + (2 * grid));}
if DrAw[7]
{mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + (2 * grid), y + grid);
 mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + grid, y + (2 * grid));}
if DrAw[8]
{mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + (2 * grid), y + grid);
 mp_grid_clear_rectangle(control.mpGrid, x - grid, y + grid, x + grid, y + grid);}
if DrAw[9]
{mp_grid_clear_rectangle(control.mpGrid, x + grid, y - grid, x + grid, y + grid);
 mp_grid_clear_rectangle(control.mpGrid, x + grid, y + grid, x + grid, y + (2 * grid));}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Frames
var a;
for (a = 0; a &lt; 10; a++)
{if DrAw[a]
 {draw_sprite(sprite_index, a, x, y);}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
