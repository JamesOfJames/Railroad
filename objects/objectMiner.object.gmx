<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteEngine</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parentEngine</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Shader

colorIn = shader_get_uniform(shColorReplaceBlend, "colorIn");
colorOut = shader_get_uniform(shColorReplaceBlend, "colorOut");
colorTolerance = shader_get_uniform(shColorReplaceBlend, "colorTolerance");
blend = shader_get_uniform(shColorReplaceBlend, "blend");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup

goal = noone;
ds_grid_clear(load, -5);
guarding = noone;

// Station Panel
lastStation = noone;

// Stuff based on level
fuel = 1.8; // pulled directly from hades star
mineRate = .12; // hades star / 50
mining = false;

name = "Hephaestus";
maxCargo = 2;

image_speed = 0;
image_index = 1;
color = control.playerColor[owner];

moveSpeed = .432 * 2; // 20% of HS

maxHP = 1;
HP = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

path_delete(path);
ds_grid_destroy(load);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send data to cars

var j;
for (j = 0; j &lt; ds_grid_height(load); j++)
{var k = ds_grid_get(load, 4, j); // k is the car we're working with
 if instance_exists(k)
 {if k.object_index == objectCar
  {k.type = ds_grid_get(load, 0, j);
   var l = path_position - (((grid + 4) * j) / path_get_length(path));
   k.x = path_get_x(path, l);
   k.y = path_get_y(path, l);}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement (self &amp; cars), Get &amp; Send Cargo
if goal != noone // there's a goal
{var a, gx, gy;
 gx = goal.x;
 gy = goal.y;
 a = point_distance(x, y, gx, gy);
 
 if a &gt; grid // if it's too far
 {if path_index == -1
  {// Move Toward Goal
   oldPath = path;
   if mp_grid_path(control.mpGrid, path, x, y, gx, gy, false)
    {var q = fuel * path_get_length(path) / grid;
     if (control.coal &gt;= q)
     {path_start(path, moveSpeed, path_action_stop, false);
      control.coal -= q;
      panelStation.uiVisible = false;
      }}}}

 else // it's close
 {speed = 0;
  goal = noone;
  path_position = 1;
  path_end();}}
 
else // there's no goal
{// is the engine stopped at a station?
 var b = instance_place(x, y, parentPlatform);
 if b
 {// Load the station's cargo
  var e = b.station;

   // Offload cargo to this destination
   if (b.object_index == objectPlatform) // Don't unload to coal docks
   {// cargo destined for "all?"
    var o;
    for (o = 0; o &lt; ds_grid_height(load); o++)
    {if (ds_grid_get(load, 1, o) == all)
     {if (e.object_index != objectLab)
      {ds_grid_set(load, 1, o, e);}}}
    // is this station a destination?
    while (ds_grid_value_exists(load, 1, 1, 1, ds_grid_height(load) - 1, e))
    {// f = first row the destination appears
     var f = ds_grid_value_y(load, 1, 1, 1, ds_grid_height(load) - 1, e);
    
   // check the time
   // NOT YET, IMPLEMENT LATER

     // For coal cars   
     if (ds_grid_get(load, 0, f) == 0)
     {control.coal += 50;} // not sure how much coal a car should be worth.  for now, hardcoded this.
     else
     {// For artifacts cars
      if (ds_grid_get(load, 0, f) == 1)
      {var a = ds_grid_height(e.cargo);
       if (max(0, ds_grid_get_sum(e.cargo, 4, 1, 4, a - 1)) &lt; e.maxCargo)
       {ds_grid_resize(e.cargo, ds_grid_width(e.cargo), a + 1);
        for (var q = 0; q &lt; ds_grid_width(e.cargo); q++)
        {ds_grid_set(e.cargo, q, a, ds_grid_get(load, q, f));}
        ds_grid_set(e.cargo, 4, a, 1);
        ds_grid_sort(e.cargo, 3, true);
        if (panelStation.uiVisible)
        {scriptStationPanel(e, id);}}}
      // For other cars    
      else
      {// Make money, clear the line
       control.money += ds_grid_get(load, 2, f);}}
       
   if instance_exists(ds_grid_get(load, 4, f))
   {var q = ds_grid_get(load, 4, f);
    instance_destroy(q);
    ds_grid_set_region(load, 0, f, ds_grid_width(load) - 1, f, -5);
    scriptDeleteRowFromGrid(load, f);}}}
    
  // at a mine  
  if (b.object_index == objectCoalPlatform) // Do a mining
  {// should I be mining?
   if (ds_grid_height(load) &lt;= 1) // no train
   {// add more conditions here, but i can't think of any?
    mining = true;}
   else
   {mining = false;}
  
   // can i mine?  disqualifiers
   if (e.coal &lt;= 0)
   {mining = false;
    e.coal = 0;}
   if (max(0, ds_grid_get_sum(e.cargo, 4, 1, 4, ds_grid_height(e.cargo) - 1)) &gt;= e.maxCargo)
   {mining = false;
    e.mined = 0;}

   // do the mining
   if (mining)
   {e.coal -= mineRate;
    e.mined += mineRate;
    scriptStationPanel(e, id);
   
    // if you've mined a carload, generate a car
    if (e.mined &gt;= 400)
    {with (e) {event_user(0);}
     e.mined -= 400;
     scriptStationPanel(e, id);}}}
    
  // while there's cars to load, break apart each line of multiple cars into individuals.
//  if (ds_grid_height(e.cargo) &gt; 1)
  {/// Bring up Station Cargo panel

   if (lastStation != e)
   {if (control.autoStationPanel)
    {if (!panelStation.uiVisible)
     {lastStation = e;
      panelStation.uiVisible = true;
      scriptStationPanel(e, id);
     }}}}  
/*  
  var c, d; // c is row, d is column
show_debug_message("engine #" + id + " loading cargo:");
   for (c = 1; c &lt; ds_grid_height(e.cargo); c++)
   {if (ds_grid_get(e.cargo, 4, c) &gt; 0)
    {ds_grid_resize(load, ds_grid_width(load), ds_grid_height(load) + 1);
     for (d = 0; d &lt; 4; d++)
     {ds_grid_set(load, d, ds_grid_height(load) - 1, ds_grid_get(e.cargo, d, c));}
     // load column 4 is the object id of the car, cargo column 4 is how many cars.
     ds_grid_set(load, 4, ds_grid_height(load) - 1, noone);

     var m = ds_grid_get(e.cargo, 4, c);
     // subtract 1 from the number of cars of this cargo if need be
     if (m &gt; 0)
     {ds_grid_set(e.cargo, 4, c, max(m - 1, 0));
      c--;}}}
   // finished each row &amp; column   
   ds_grid_resize(e.cargo, ds_grid_width(e.cargo), 1);
   ds_grid_clear(e.cargo, -5);}*/
    
}}

ds_grid_sort(load, 4, true);

// is there a car that needs to be created?  
while (ds_grid_value_exists(load, 4, 1, 4, ds_grid_height(load) - 1, noone))
{var h = instance_create(x, y, objectCar);
 h.owner = owner;
 var i = ds_grid_value_y(load, 4, 1, 4, ds_grid_height(load) - 1, noone); // the position of the car that needs to be created
 ds_grid_set(load, 4, i, h);}

// send the data to each car
var j;
for (j = 0; j &lt; ds_grid_height(load); j++)
{var k = ds_grid_get(load, 4, j); // k is the car we're working with
 if instance_exists(k)
 {if k.object_index == objectCar
  {k.type = ds_grid_get(load, 0, j);
   var l = path_position - ((grid * j) / path_get_length(path));
   k.x = path_get_x(path, l);
   k.y = path_get_y(path, l);}
  else
  {show_debug_message("windmills do not work that way");}}}
  
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Eventually, this will be where cargo loading / unloading happens, but i haven't optimized yet.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

path_delete(path);
ds_grid_destroy(load);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

path_delete(path);
ds_grid_destroy(load);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Load at top left
/*draw_set_alpha(1);
draw_set_font(fontArialBlack12);
draw_set_valign(fa_top);
draw_set_halign(fa_left);

var guix, guiy;

guix = 16;
guiy = 16;
draw_set_color(c_white);
draw_text(guix, guiy, "Type   Destination   Value   Created   ID - height:" + ds_grid_height(load));
guiy += 16;

var a, b, c;
for (b = 0; b &lt; ds_grid_height(load); b++)
{c = "";
 for (a = 0; a &lt; ds_grid_width(load); a++)
 {c += ds_grid_get(load, a, b);}
 draw_text(guix, guiy, c);
 guiy += 16;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Event_inherited();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Color Swap Shader - good?

if( shader_is_compiled(shColorReplaceBlend) )
{shader_set(shColorReplaceBlend);

 // 1,1,1,1 = PURE white (each RGBA channel is 0 to 1)
 shader_set_uniform_f(colorIn, 0, 1, 0, 1);
 shader_set_uniform_f(colorOut, color_get_red(color) / 256, color_get_green(color) / 256, color_get_blue(color) / 256, 1);
 shader_set_uniform_f(colorTolerance, 0.1, 0.1, 1, 1); 
 shader_set_uniform_f(blend, 1); 

 draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);}
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw path
/*
draw_set_colour(c_blue);
draw_path(path,x,y,true);
draw_set_colour(c_navy);
draw_path(oldPath,x,y,true);
/*

draw_set_colour(c_black); 
draw_text(x, y + 16, string(path_position + " " + path_index));
/*
// Where the first car should appear
draw_set_colour(c_red); 
var a = path_position - (grid / path_get_length(path));
draw_circle(path_get_x(path, a), path_get_y(path, a), 4, true);


draw_set_colour(c_red); 
var a;
for (a = 0; a &lt; path_get_number(path); a++)
{draw_circle(path_get_point_x(path, a), path_get_point_y(path, a), 4, true);}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// how large is the cargo/load grid?

//draw_text(x, y, string(ds_grid_height(load)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
